import cv2
import numpy as np
from piservo import Servo
import time

# Initialize servo control for pan and tilt
pan = Servo(19)
tilt = Servo(12)

# Define the initial position for the servos
pan.write(90)
tilt.write(60)

# Define the step size for the servos
pan_step = 2
tilt_step = 2

# Define the minimum and maximum values for the servos
pan_min = 40
pan_max = 140
tilt_min = 0
tilt_max = 80


pan_smooth = pan.read()
tilt_smooth = tilt.read()

# Define the video capture
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)


# Set up the face detection
face_cascade = cv2.CascadeClassifier('haarcascades/haarcascade_frontalface_default.xml')

# Define the threshold for the smoothing filter
threshold = 0.9

# Initialize the previous distance
prev_distance = np.array([0, 0])

while True:
    # Capture the frame from the video
    ret, frame = cap.read()
    
    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    
    # Calculate the centroid of the frame
    frame_centroid = np.array([frame.shape[1]/2, frame.shape[0]/2])
    
    # Check if there is a face detected
    if len(faces) > 0:
        # Get the first face detected
        x, y, w, h = faces[0]
        
        # Draw a rectangle around the face
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
        
        # Calculate the centroid of the face
        face_centroid = np.array([x + w/2, y + h/2])
        
        # Calculate the distance between the frame and face centroids
        distance = frame_centroid - face_centroid
        print(distance)
        
        # Apply a smoothing filter to the distance
        distance = threshold * prev_distance + (1-threshold) * distance
        prev_distance = distance
        
        # Read the current positions of the servos
        pan_position = pan.read()
        tilt_position = tilt.read()
        
            
            # Check if the face centroid is to the right of the frame centroid
        if abs(distance[0]) < 10:
            pan_position = pan.read()
        else:
            if distance[0] < 0:
                pan_position -= pan_step
            if distance[0] > 0:
                pan_position += pan_step
        
        # Check if the face centroid is above or below the frame centroid
        if abs(distance[1]) < 10:
            tilt_position = tilt.read()
        else:
            if distance[1] < 0:
                tilt_position -= tilt_step
            if distance[1] > 0:
                tilt_position += tilt_step

            # Limit the servo positions to their minimum and maximum values
        pan_position = max(pan_min, min(pan_max, pan_position))
        tilt_position = max(tilt_min, min(tilt_max, tilt_position))

        # Apply a smoothing filter to the servo positions
        pan_smooth = 0.9 * pan_smooth + 0.1 * pan_position
        tilt_smooth = 0.9 * tilt_smooth + 0.1 * tilt_position

        # Move the servos to the filtered positions
        pan.write(pan_smooth)
        tilt.write(tilt_smooth)
        # Display the frame
    cv2.imshow('Frame', frame)
    
    # Break the loop if the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and destroy the windows
cap.release()
cv2.destroyAllWindows
